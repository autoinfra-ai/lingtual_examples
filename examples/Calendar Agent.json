{"name":"Calendar Agent","description":"Talk to your primary Google Calendar. Read only","data":{"nodes":[{"width":384,"height":317,"id":"BasicAgent-3Fwfz","type":"genericNode","position":{"x":401.05847558424716,"y":-154.82652061718522},"data":{"type":"BasicAgent","node":{"template":{"tools":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"tools","advanced":false,"dynamic":false,"info":"","type":"Tool","list":true},"agent":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"openai-functions","password":false,"options":["zero-shot-react-description","react-docstore","self-ask-with-search","conversational-react-description","openai-functions","openai-multi-functions"],"name":"agent","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"_type":"initialize_agent"},"description":"AI w/memory that can use tools and integrations","base_classes":["AgentExecutor","function"],"display_name":"BasicAgent","custom_fields":{},"output_types":[],"documentation":"","level":"basic","beta":false,"error":null},"id":"BasicAgent-3Fwfz","value":null},"positionAbsolute":{"x":401.05847558424716,"y":-154.82652061718522},"selected":false,"dragging":false},{"width":384,"height":207,"id":"google_calendar-nUWZH","type":"genericNode","position":{"x":-127.60440097238819,"y":-91.48126680286947},"data":{"type":"google_calendar","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":true,"multiline":true,"value":"from datetime import datetime\nfrom typing import List, Optional\n\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom langchain.tools import Tool, tool\nfrom pydantic import BaseModel, Field\nfrom langchain.agents.agent_toolkits.openapi.spec import reduce_openapi_spec\n\n\nfrom langflow import CustomComponent\n\n\nclass GoogleCalendar(CustomComponent):\n    display_name = \"Google Calendar (Read Only)\"\n    description = \"Integration with Google Calendar. Can only read events.\"\n    access_token = \"INJECT_TOKEN\"\n    refresh_token = \"INJECT_REFRESH\"\n\n    def build_config(self) -> dict:\n        options = [\n            \"Option1\",\n            \"Option2\",\n            \"Option3\",\n        ]  # These are placeholders for endpoints that will map to json schema for endpoints\n        # these gets parsed by JS in the frontend to be used by nango, and backened @ /build/init/{flow_id}\n        integration_id = \"google-calendar\"\n        return {\n            \"integration_id\": {\n                \"field_type\": \"str\",\n                \"value\": integration_id,\n                \"advanced\": True,  # Hide the field in canvas view.\n            },\n            \"permissions\": {\n                \"field_type\": \"str\",\n                \"options\": options,\n                \"value\": options[0],  # Default value is the first option\n                \"display_name\": \"Google Calendar String\",\n            },\n        }\n\n    def get_calendar(\n        self,\n        calendarId: str = \"primary\",\n        alwaysIncludeEmail: Optional[bool] = None,\n        iCalUID: Optional[str] = None,\n        maxAttendees: Optional[int] = None,\n        maxResults: Optional[int] = 250,\n        orderBy: Optional[str] = None,\n        pageToken: Optional[str] = None,\n        privateExtendedProperty: Optional[List[str]] = None,\n        q: Optional[str] = None,\n        sharedExtendedProperty: Optional[List[str]] = None,\n        showDeleted: Optional[bool] = False,\n        showHiddenInvitations: Optional[bool] = False,\n        singleEvents: Optional[bool] = False,\n        syncToken: Optional[str] = None,\n        timeMax: Optional[str] = None,\n        timeMin: Optional[str] = None,\n        timeZone: Optional[str] = None,\n        updatedMin: Optional[datetime] = None,\n    ):\n        \"\"\"\n        A model for Google Calendar API Input, including various parameters for event filtering and pagination.\n        Always use parameters such that you minimize the amount of uneeded data returned from API.\n\n        Params:\n            See build step\n        \"\"\"\n        print(self.token)\n        # auth_data = self.get_access_token(integration_id=\"google-calendar\", connection_id=self.sub)[\"google-calendar\"]\n        # access_token = auth_data.get(\"credentials\", {}).get(\"access_token\")\n        print(\"TOKENS\", self.access_token, self.refresh_token)\n        credentials = Credentials(token=self.access_token, refresh_token=self.refresh_token)\n        service = build(\"calendar\", \"v3\", credentials=credentials)\n        events_result = (\n            service.events()\n            .list(\n                calendarId=calendarId,\n                alwaysIncludeEmail=alwaysIncludeEmail,\n                # eventTypes=eventTypes,\n                iCalUID=iCalUID,\n                maxAttendees=maxAttendees,\n                maxResults=maxResults,\n                orderBy=orderBy,\n                pageToken=pageToken,\n                privateExtendedProperty=privateExtendedProperty,\n                q=q,\n                sharedExtendedProperty=sharedExtendedProperty,\n                showDeleted=showDeleted,\n                showHiddenInvitations=showHiddenInvitations,\n                singleEvents=singleEvents,\n                syncToken=syncToken,\n                timeMax=timeMax,\n                timeMin=timeMin,\n                timeZone=timeZone,\n                updatedMin=updatedMin,\n            )\n            .execute()\n        )\n\n        print(events_result)\n        return str(events_result)\n\n    def build(self, integration_id) -> Tool:\n        # HACK DON'T ASK ME WHY, but this class works when it is defined here, but not when it is defined in the global scope\n        class CalendarAPIInput(BaseModel):\n            calendarId: str = Field(\n                \"primary\",\n                description=(\n                    \"Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to\"\n                    \" access the primary calendar of the currently logged in user, use the 'primary' keyword.\"\n                ),\n            )\n\n            # Optional query parameters\n            # eventTypes: List[str] = Field(\n            #     [\"default\", \"focusTime\", \"outOfOffice\"],\n            #     description=(\n            #         \"Event types to return. This parameter can be repeated multiple times to return events of different\"\n            #         \" types.\"\n            #     ),\n            # )\n            iCalUID: Optional[str] = Field(\n                None, description=\"Specifies an event ID in the iCalendar format to be provided in the response.\"\n            )\n            maxAttendees: Optional[int] = Field(\n                None,\n                description=(\n                    \"The maximum number of attendees to include in the response. If there are more than the specified\"\n                    \" number of attendees, only the participant is returned.\"\n                ),\n            )\n            maxResults: Optional[int] = Field(\n                250,\n                description=(\n                    \"Maximum number of events returned on one result page. The page size can never be larger than 2500\" \" events.\"\n                ),\n            )\n            orderBy: Optional[str] = Field(\n                None,\n                description=(\n                    \"Order events by 'startTime' (ascending, for single events only) or 'updated' (ascending, by last modification time).\"\n                ),\n            )\n            pageToken: Optional[str] = Field(None, description=\"Token specifying which result page to return.\")\n            privateExtendedProperty: Optional[List[str]] = Field(\n                None,\n                description=(\"Extended properties constraint specified as propertyName=value. Matches only private properties.\"),\n            )\n            q: Optional[str] = Field(None, description=\"Free text search terms to find events that match these terms in various fields.\")\n            sharedExtendedProperty: Optional[List[str]] = Field(\n                None,\n                description=(\"Extended properties constraint specified as propertyName=value. Matches only shared properties.\"),\n            )\n            showDeleted: Optional[bool] = Field(False, description=\"Whether to include deleted events in the result.\")\n            showHiddenInvitations: Optional[bool] = Field(False, description=\"Whether to include hidden invitations in the result.\")\n            singleEvents: Optional[bool] = Field(False, description=\"Whether to expand recurring events into instances.\")\n            syncToken: Optional[str] = Field(\n                None,\n                description=(\n                    \"Token obtained from the nextSyncToken field returned on the last page of results from the previous\" \" list request.\"\n                ),\n            )\n            timeMax: Optional[str] = Field(\n                None,\n                description=(\"Upper bound for an event's start time to filter by. Must be YYYY-MM-DDTHH:MM:SS[Z] format in UTC\"),\n            )\n            timeMin: Optional[str] = Field(\n                None,\n                description=(\"Lower bound for an event's end time to filter by. Must be YYYY-MM-DDTHH:MM:SS[Z] format in UTC\"),\n            )\n            timeZone: Optional[str] = Field(\n                None, description=\"Time zone used in the response. The default is the time zone of the calendar.\"\n            )\n            updatedMin: Optional[datetime] = Field(None, description=\"Lower bound for an event's last modification time to filter by.\")\n\n        return tool(self.get_calendar, args_schema=CalendarAPIInput)\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","integration_id":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"google-calendar","password":false,"name":"integration_id","display_name":"integration_id","advanced":true,"dynamic":false,"info":"","type":"str","list":false}},"description":"Integration with Google Calendar. Can only read events.","base_classes":["Tool","BaseTool"],"display_name":"Google Calendar (Read Only)","custom_fields":{"integration_id":null},"output_types":[],"documentation":"","level":"both","beta":true,"error":null},"id":"google_calendar-nUWZH","value":null},"selected":true,"positionAbsolute":{"x":-127.60440097238819,"y":-91.48126680286947},"dragging":false}],"edges":[{"source":"google_calendar-nUWZH","sourceHandle":"google_calendar|google_calendar-nUWZH|Tool|BaseTool","target":"BasicAgent-3Fwfz","targetHandle":"Tool|tools|BasicAgent-3Fwfz","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-google_calendar-nUWZHgoogle_calendar|google_calendar-nUWZH|Tool|BaseTool-BasicAgent-3FwfzTool|tools|BasicAgent-3Fwfz"}],"viewport":{"x":230.88465123389705,"y":818.6041212971807,"zoom":1.332763353926289}},"user_id":"auth0|64a0e7cb1a091ad7c24501a6","id":"bd9aa3e7-23c8-4f4b-8a2c-7f2d9fb5fef3","style":null}